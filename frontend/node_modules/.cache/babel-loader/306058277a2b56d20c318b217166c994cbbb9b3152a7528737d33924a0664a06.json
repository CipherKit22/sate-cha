{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Downloads\\\\test1\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for existing session\n    const initializeAuth = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        setUser(user);\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((event, session) => {\n      var _session$user;\n      setUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n      setLoading(false);\n    });\n    return () => {\n      subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();\n    };\n  }, []);\n  const signIn = async (email, password) => {\n    setLoading(true);\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) {\n        return {\n          error: error.message\n        };\n      }\n      if (data.user) {\n        setUser(data.user);\n        return {};\n      }\n      return {\n        error: 'Sign in failed'\n      };\n    } catch (error) {\n      return {\n        error: 'An unexpected error occurred'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signUp = async data => {\n    setLoading(true);\n    try {\n      const {\n        data: authData,\n        error\n      } = await supabase.auth.signUp({\n        email: data.email,\n        password: data.password,\n        options: {\n          data: {\n            username: data.username,\n            full_name: data.fullName,\n            language_preference: data.languagePreference\n          }\n        }\n      });\n      if (error) {\n        return {\n          error: error.message\n        };\n      }\n      if (authData.user) {\n        setUser(authData.user);\n        return {};\n      }\n      return {\n        error: 'Sign up failed'\n      };\n    } catch (error) {\n      return {\n        error: 'An unexpected error occurred'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signOut = async () => {\n    setLoading(true);\n    try {\n      await supabase.auth.signOut();\n      setUser(null);\n    } catch (error) {\n      console.error('Sign out error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateProfile = async updates => {\n    if (!user) return {\n      error: 'No user logged in'\n    };\n    try {\n      const result = await authService.updateProfile(user.id, updates);\n      if (!result.error) {\n        // Refresh user data\n        const updatedUser = await authService.getCurrentUser();\n        setUser(updatedUser);\n      }\n      return result;\n    } catch (error) {\n      return {\n        error: 'Failed to update profile'\n      };\n    }\n  };\n  const value = {\n    user,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","initializeAuth","data","auth","getUser","error","console","subscription","onAuthStateChange","event","session","_session$user","unsubscribe","signIn","email","password","signInWithPassword","message","signUp","authData","options","username","full_name","fullName","language_preference","languagePreference","signOut","updateProfile","updates","result","authService","id","updatedUser","getCurrentUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Acer/Downloads/test1/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { supabase } from '../lib/supabase';\nimport type { User } from '@supabase/supabase-js';\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<{ error?: string }>;\n  signUp: (data: {\n    email: string;\n    password: string;\n    username: string;\n    fullName: string;\n    languagePreference: 'en' | 'my';\n  }) => Promise<{ error?: string }>;\n  signOut: () => Promise<void>;\n  updateProfile: (updates: any) => Promise<{ error?: string }>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing session\n    const initializeAuth = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        setUser(user);\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    return () => {\n      subscription?.unsubscribe();\n    };\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n      if (error) {\n        return { error: error.message };\n      }\n      if (data.user) {\n        setUser(data.user);\n        return {};\n      }\n      return { error: 'Sign in failed' };\n    } catch (error) {\n      return { error: 'An unexpected error occurred' };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (data: {\n    email: string;\n    password: string;\n    username: string;\n    fullName: string;\n    languagePreference: 'en' | 'my';\n  }) => {\n    setLoading(true);\n    try {\n      const { data: authData, error } = await supabase.auth.signUp({\n        email: data.email,\n        password: data.password,\n        options: {\n          data: {\n            username: data.username,\n            full_name: data.fullName,\n            language_preference: data.languagePreference\n          }\n        }\n      });\n      \n      if (error) {\n        return { error: error.message };\n      }\n      \n      if (authData.user) {\n        setUser(authData.user);\n        return {};\n      }\n      \n      return { error: 'Sign up failed' };\n    } catch (error) {\n      return { error: 'An unexpected error occurred' };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    setLoading(true);\n    try {\n      await supabase.auth.signOut();\n      setUser(null);\n    } catch (error) {\n      console.error('Sign out error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateProfile = async (updates: any) => {\n    if (!user) return { error: 'No user logged in' };\n    \n    try {\n      const result = await authService.updateProfile(user.id, updates);\n      if (!result.error) {\n        // Refresh user data\n        const updatedUser = await authService.getCurrentUser();\n        setUser(updatedUser);\n      }\n      return result;\n    } catch (error) {\n      return { error: 'Failed to update profile' };\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    updateProfile,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}