{"ast":null,"code":"import { supabase } from '../lib/supabase';\nclass AuthService {\n  async signUp(data) {\n    try {\n      const {\n        data: authData,\n        error: authError\n      } = await supabase.auth.signUp({\n        email: data.email,\n        password: data.password\n      });\n      if (authError) {\n        return {\n          error: authError.message\n        };\n      }\n      if (authData.user) {\n        // Create profile\n        const {\n          error: profileError\n        } = await supabase.from('profiles').insert({\n          id: authData.user.id,\n          username: data.username,\n          full_name: data.fullName,\n          language_preference: data.languagePreference\n        });\n        if (profileError) {\n          return {\n            error: profileError.message\n          };\n        }\n        return {\n          user: {\n            id: authData.user.id,\n            email: authData.user.email\n          }\n        };\n      }\n      return {\n        error: 'Failed to create user'\n      };\n    } catch (error) {\n      return {\n        error: 'An unexpected error occurred'\n      };\n    }\n  }\n  async signIn(data) {\n    try {\n      const {\n        data: authData,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email: data.email,\n        password: data.password\n      });\n      if (error) {\n        return {\n          error: error.message\n        };\n      }\n      if (authData.user) {\n        const profile = await this.getProfile(authData.user.id);\n        return {\n          user: {\n            id: authData.user.id,\n            email: authData.user.email,\n            profile: profile || undefined\n          }\n        };\n      }\n      return {\n        error: 'Failed to sign in'\n      };\n    } catch (error) {\n      return {\n        error: 'An unexpected error occurred'\n      };\n    }\n  }\n  async signOut() {\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) {\n        return {\n          error: error.message\n        };\n      }\n      return {};\n    } catch (error) {\n      return {\n        error: 'An unexpected error occurred'\n      };\n    }\n  }\n  async getCurrentUser() {\n    try {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (user) {\n        const profile = await this.getProfile(user.id);\n        return {\n          id: user.id,\n          email: user.email,\n          profile: profile || undefined\n        };\n      }\n      return null;\n    } catch (error) {\n      return null;\n    }\n  }\n  async getProfile(userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('profiles').select('*').eq('id', userId).single();\n      if (error) {\n        return null;\n      }\n      return data;\n    } catch (error) {\n      return null;\n    }\n  }\n  async updateProfile(userId, updates) {\n    try {\n      const {\n        error\n      } = await supabase.from('profiles').update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      }).eq('id', userId);\n      if (error) {\n        return {\n          error: error.message\n        };\n      }\n      return {};\n    } catch (error) {\n      return {\n        error: 'An unexpected error occurred'\n      };\n    }\n  }\n  onAuthStateChange(callback) {\n    return supabase.auth.onAuthStateChange(async (event, session) => {\n      if (session !== null && session !== void 0 && session.user) {\n        const profile = await this.getProfile(session.user.id);\n        callback({\n          id: session.user.id,\n          email: session.user.email,\n          profile: profile || undefined\n        });\n      } else {\n        callback(null);\n      }\n    });\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["supabase","AuthService","signUp","data","authData","error","authError","auth","email","password","message","user","profileError","from","insert","id","username","full_name","fullName","language_preference","languagePreference","signIn","signInWithPassword","profile","getProfile","undefined","signOut","getCurrentUser","getUser","userId","select","eq","single","updateProfile","updates","update","updated_at","Date","toISOString","onAuthStateChange","callback","event","session","authService"],"sources":["C:/Users/Acer/Downloads/test1/frontend/src/services/auth.ts"],"sourcesContent":["import { supabase, Profile, User } from '../lib/supabase';\nimport { AuthError, User as SupabaseUser } from '@supabase/supabase-js';\n\nexport interface AuthResponse {\n  user?: User;\n  error?: string;\n}\n\nexport interface SignUpData {\n  email: string;\n  password: string;\n  username: string;\n  fullName: string;\n  languagePreference: 'en' | 'my';\n}\n\nexport interface SignInData {\n  email: string;\n  password: string;\n}\n\nclass AuthService {\n  async signUp(data: SignUpData): Promise<AuthResponse> {\n    try {\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email: data.email,\n        password: data.password,\n      });\n\n      if (authError) {\n        return { error: authError.message };\n      }\n\n      if (authData.user) {\n        // Create profile\n        const { error: profileError } = await supabase\n          .from('profiles')\n          .insert({\n            id: authData.user.id,\n            username: data.username,\n            full_name: data.fullName,\n            language_preference: data.languagePreference,\n          });\n\n        if (profileError) {\n          return { error: profileError.message };\n        }\n\n        return { user: { id: authData.user.id, email: authData.user.email! } };\n      }\n\n      return { error: 'Failed to create user' };\n    } catch (error) {\n      return { error: 'An unexpected error occurred' };\n    }\n  }\n\n  async signIn(data: SignInData): Promise<AuthResponse> {\n    try {\n      const { data: authData, error } = await supabase.auth.signInWithPassword({\n        email: data.email,\n        password: data.password,\n      });\n\n      if (error) {\n        return { error: error.message };\n      }\n\n      if (authData.user) {\n        const profile = await this.getProfile(authData.user.id);\n        return {\n          user: {\n            id: authData.user.id,\n            email: authData.user.email!,\n            profile: profile || undefined,\n          },\n        };\n      }\n\n      return { error: 'Failed to sign in' };\n    } catch (error) {\n      return { error: 'An unexpected error occurred' };\n    }\n  }\n\n  async signOut(): Promise<{ error?: string }> {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) {\n        return { error: error.message };\n      }\n      return {};\n    } catch (error) {\n      return { error: 'An unexpected error occurred' };\n    }\n  }\n\n  async getCurrentUser(): Promise<User | null> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (user) {\n        const profile = await this.getProfile(user.id);\n        return {\n          id: user.id,\n          email: user.email!,\n          profile: profile || undefined,\n        };\n      }\n      \n      return null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  async getProfile(userId: string): Promise<Profile | null> {\n    try {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (error) {\n        return null;\n      }\n\n      return data;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  async updateProfile(userId: string, updates: Partial<Profile>): Promise<{ error?: string }> {\n    try {\n      const { error } = await supabase\n        .from('profiles')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', userId);\n\n      if (error) {\n        return { error: error.message };\n      }\n\n      return {};\n    } catch (error) {\n      return { error: 'An unexpected error occurred' };\n    }\n  }\n\n  onAuthStateChange(callback: (user: User | null) => void) {\n    return supabase.auth.onAuthStateChange(async (event, session) => {\n      if (session?.user) {\n        const profile = await this.getProfile(session.user.id);\n        callback({\n          id: session.user.id,\n          email: session.user.email!,\n          profile: profile || undefined,\n        });\n      } else {\n        callback(null);\n      }\n    });\n  }\n}\n\nexport const authService = new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}