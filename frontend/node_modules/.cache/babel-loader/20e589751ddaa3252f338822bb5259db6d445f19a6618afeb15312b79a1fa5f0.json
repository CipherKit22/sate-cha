{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Downloads\\\\test1\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [is2FAEnabled, setIs2FAEnabled] = useState(false);\n  useEffect(() => {\n    // Check for existing session\n    const initializeAuth = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        setUser(user);\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((event, session) => {\n      var _session$user;\n      setUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n      setLoading(false);\n    });\n    return () => {\n      subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();\n    };\n  }, []);\n\n  // Password + OTP Authentication\n  const signUp = async (email, password, userData) => {\n    setLoading(true);\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: userData || {}\n        }\n      });\n      if (error) {\n        return {\n          error: error.message\n        };\n      }\n      if (data.user) {\n        setUser(data.user);\n        // Enable 2FA if requested\n        if (userData !== null && userData !== void 0 && userData.enable2FA) {\n          await enable2FA();\n        }\n      }\n      return {};\n    } catch (error) {\n      return {\n        error: 'Failed to create account'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signIn = async (email, password) => {\n    setLoading(true);\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) {\n        return {\n          error: error.message\n        };\n      }\n      if (data.user) {\n        var _data$user$user_metad;\n        setUser(data.user);\n        // Check if 2FA is enabled for this user\n        setIs2FAEnabled(((_data$user$user_metad = data.user.user_metadata) === null || _data$user$user_metad === void 0 ? void 0 : _data$user$user_metad.twoFactorEnabled) || false);\n      }\n      return {};\n    } catch (error) {\n      return {\n        error: 'Failed to sign in'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const sendOTP = async (email, mode, userData) => {\n    setLoading(true);\n    try {\n      // Use signInWithOtp for both signup and signin\n      const {\n        error\n      } = await supabase.auth.signInWithOtp({\n        email,\n        options: {\n          shouldCreateUser: mode === 'signup',\n          data: userData || {}\n        }\n      });\n      if (error) {\n        return {\n          error: error.message\n        };\n      }\n      return {};\n    } catch (error) {\n      return {\n        error: 'Failed to send OTP'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const verifyOTP = async (email, otp, mode) => {\n    setLoading(true);\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.verifyOtp({\n        email,\n        token: otp,\n        type: 'email' // Use 'email' type for both signup and signin with OTP\n      });\n      if (error) {\n        return {\n          error: error.message\n        };\n      }\n      if (data.user) {\n        setUser(data.user);\n        return {};\n      }\n      return {\n        error: 'OTP verification failed'\n      };\n    } catch (error) {\n      return {\n        error: 'An unexpected error occurred'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signOut = async () => {\n    setLoading(true);\n    try {\n      await supabase.auth.signOut();\n      setUser(null);\n    } catch (error) {\n      console.error('Sign out error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateProfile = async updates => {\n    if (!user) return {\n      error: 'No user logged in'\n    };\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.updateUser({\n        data: updates\n      });\n      if (error) {\n        return {\n          error: error.message\n        };\n      }\n      if (data.user) {\n        setUser(data.user);\n      }\n      return {};\n    } catch (error) {\n      return {\n        error: 'Failed to update profile'\n      };\n    }\n  };\n  const value = {\n    user,\n    loading,\n    sendOTP,\n    verifyOTP,\n    signOut,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"QgA0GXMy6XLL8M9kdsbaE4bYyZw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","is2FAEnabled","setIs2FAEnabled","initializeAuth","data","auth","getUser","error","console","subscription","onAuthStateChange","event","session","_session$user","unsubscribe","signUp","email","password","userData","options","message","enable2FA","signIn","signInWithPassword","_data$user$user_metad","user_metadata","twoFactorEnabled","sendOTP","mode","signInWithOtp","shouldCreateUser","verifyOTP","otp","verifyOtp","token","type","signOut","updateProfile","updates","updateUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Acer/Downloads/test1/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { supabase } from '../lib/supabase';\nimport type { User } from '@supabase/supabase-js';\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  // Password + OTP Authentication\n  signUp: (email: string, password: string, userData?: {\n    username: string;\n    fullName: string;\n    languagePreference: 'en' | 'my';\n    enable2FA?: boolean;\n  }) => Promise<{ error?: string }>;\n  signIn: (email: string, password: string) => Promise<{ error?: string }>;\n  // OTP-only Authentication (fallback)\n  sendOTP: (email: string, mode: 'signup' | 'signin', userData?: {\n    username: string;\n    fullName: string;\n    languagePreference: 'en' | 'my';\n  }) => Promise<{ error?: string }>;\n  verifyOTP: (email: string, otp: string, mode: 'signup' | 'signin') => Promise<{ error?: string }>;\n  // 2FA Methods\n  enable2FA: () => Promise<{ qrCode?: string; secret?: string; error?: string }>;\n  verify2FA: (token: string) => Promise<{ error?: string }>;\n  disable2FA: () => Promise<{ error?: string }>;\n  is2FAEnabled: boolean;\n  // Profile Management\n  signOut: () => Promise<void>;\n  updateProfile: (updates: any) => Promise<{ error?: string }>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [is2FAEnabled, setIs2FAEnabled] = useState(false);\n\n  useEffect(() => {\n    // Check for existing session\n    const initializeAuth = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        setUser(user);\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    return () => {\n      subscription?.unsubscribe();\n    };\n  }, []);\n\n  // Password + OTP Authentication\n  const signUp = async (email: string, password: string, userData?: {\n    username: string;\n    fullName: string;\n    languagePreference: 'en' | 'my';\n    enable2FA?: boolean;\n  }) => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: userData || {}\n        }\n      });\n      \n      if (error) {\n        return { error: error.message };\n      }\n      \n      if (data.user) {\n        setUser(data.user);\n        // Enable 2FA if requested\n        if (userData?.enable2FA) {\n          await enable2FA();\n        }\n      }\n      \n      return {};\n    } catch (error) {\n      return { error: 'Failed to create account' };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signIn = async (email: string, password: string) => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      \n      if (error) {\n        return { error: error.message };\n      }\n      \n      if (data.user) {\n        setUser(data.user);\n        // Check if 2FA is enabled for this user\n        setIs2FAEnabled(data.user.user_metadata?.twoFactorEnabled || false);\n      }\n      \n      return {};\n    } catch (error) {\n      return { error: 'Failed to sign in' };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sendOTP = async (email: string, mode: 'signup' | 'signin', userData?: {\n    username: string;\n    fullName: string;\n    languagePreference: 'en' | 'my';\n  }) => {\n    setLoading(true);\n    try {\n      // Use signInWithOtp for both signup and signin\n      const { error } = await supabase.auth.signInWithOtp({\n        email,\n        options: {\n          shouldCreateUser: mode === 'signup',\n          data: userData || {}\n        }\n      });\n      \n      if (error) {\n        return { error: error.message };\n      }\n      \n      return {};\n    } catch (error) {\n      return { error: 'Failed to send OTP' };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const verifyOTP = async (email: string, otp: string, mode: 'signup' | 'signin') => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.auth.verifyOtp({\n        email,\n        token: otp,\n        type: 'email' // Use 'email' type for both signup and signin with OTP\n      });\n      \n      if (error) {\n        return { error: error.message };\n      }\n      \n      if (data.user) {\n        setUser(data.user);\n        return {};\n      }\n      \n      return { error: 'OTP verification failed' };\n    } catch (error) {\n      return { error: 'An unexpected error occurred' };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    setLoading(true);\n    try {\n      await supabase.auth.signOut();\n      setUser(null);\n    } catch (error) {\n      console.error('Sign out error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateProfile = async (updates: any) => {\n    if (!user) return { error: 'No user logged in' };\n    \n    try {\n      const { data, error } = await supabase.auth.updateUser({\n        data: updates\n      });\n      \n      if (error) {\n        return { error: error.message };\n      }\n      \n      if (data.user) {\n        setUser(data.user);\n      }\n      \n      return {};\n    } catch (error) {\n      return { error: 'Failed to update profile' };\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    loading,\n    sendOTP,\n    verifyOTP,\n    signOut,\n    updateProfile\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}